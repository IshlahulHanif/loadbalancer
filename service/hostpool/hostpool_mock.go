// Code generated by MockGen. DO NOT EDIT.
// Source: service/hostpool/contract.go

// Package hostpool is a generated GoMock package.
package hostpool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseHostpool is a mock of UsecaseHostpool interface.
type MockUsecaseHostpool struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseHostpoolMockRecorder
}

// MockUsecaseHostpoolMockRecorder is the mock recorder for MockUsecaseHostpool.
type MockUsecaseHostpoolMockRecorder struct {
	mock *MockUsecaseHostpool
}

// NewMockUsecaseHostpool creates a new mock instance.
func NewMockUsecaseHostpool(ctrl *gomock.Controller) *MockUsecaseHostpool {
	mock := &MockUsecaseHostpool{ctrl: ctrl}
	mock.recorder = &MockUsecaseHostpoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseHostpool) EXPECT() *MockUsecaseHostpoolMockRecorder {
	return m.recorder
}

// AddHost mocks base method.
func (m *MockUsecaseHostpool) AddHost(ctx context.Context, host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHost", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHost indicates an expected call of AddHost.
func (mr *MockUsecaseHostpoolMockRecorder) AddHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockUsecaseHostpool)(nil).AddHost), ctx, host)
}

// GetHostListFromPool mocks base method.
func (m *MockUsecaseHostpool) GetHostListFromPool(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostListFromPool", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostListFromPool indicates an expected call of GetHostListFromPool.
func (mr *MockUsecaseHostpoolMockRecorder) GetHostListFromPool(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostListFromPool", reflect.TypeOf((*MockUsecaseHostpool)(nil).GetHostListFromPool), ctx)
}

// RemoveHost mocks base method.
func (m *MockUsecaseHostpool) RemoveHost(ctx context.Context, host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHost", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockUsecaseHostpoolMockRecorder) RemoveHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockUsecaseHostpool)(nil).RemoveHost), ctx, host)
}

// MockUsecasePoolClient is a mock of UsecasePoolClient interface.
type MockUsecasePoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsecasePoolClientMockRecorder
}

// MockUsecasePoolClientMockRecorder is the mock recorder for MockUsecasePoolClient.
type MockUsecasePoolClientMockRecorder struct {
	mock *MockUsecasePoolClient
}

// NewMockUsecasePoolClient creates a new mock instance.
func NewMockUsecasePoolClient(ctrl *gomock.Controller) *MockUsecasePoolClient {
	mock := &MockUsecasePoolClient{ctrl: ctrl}
	mock.recorder = &MockUsecasePoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecasePoolClient) EXPECT() *MockUsecasePoolClientMockRecorder {
	return m.recorder
}

// PingHost mocks base method.
func (m *MockUsecasePoolClient) PingHost(ctx context.Context, host string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingHost", ctx, host)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PingHost indicates an expected call of PingHost.
func (mr *MockUsecasePoolClientMockRecorder) PingHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHost", reflect.TypeOf((*MockUsecasePoolClient)(nil).PingHost), ctx, host)
}
