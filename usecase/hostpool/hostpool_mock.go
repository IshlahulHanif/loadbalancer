// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/hostpool/contract.go

// Package hostpool is a generated GoMock package.
package hostpool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepoHostpool is a mock of RepoHostpool interface.
type MockRepoHostpool struct {
	ctrl     *gomock.Controller
	recorder *MockRepoHostpoolMockRecorder
}

// MockRepoHostpoolMockRecorder is the mock recorder for MockRepoHostpool.
type MockRepoHostpoolMockRecorder struct {
	mock *MockRepoHostpool
}

// NewMockRepoHostpool creates a new mock instance.
func NewMockRepoHostpool(ctrl *gomock.Controller) *MockRepoHostpool {
	mock := &MockRepoHostpool{ctrl: ctrl}
	mock.recorder = &MockRepoHostpoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoHostpool) EXPECT() *MockRepoHostpoolMockRecorder {
	return m.recorder
}

// AppendHost mocks base method.
func (m *MockRepoHostpool) AppendHost(ctx context.Context, host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendHost", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendHost indicates an expected call of AppendHost.
func (mr *MockRepoHostpoolMockRecorder) AppendHost(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHost", reflect.TypeOf((*MockRepoHostpool)(nil).AppendHost), ctx, host)
}

// GetCurrentIndex mocks base method.
func (m *MockRepoHostpool) GetCurrentIndex(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentIndex", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentIndex indicates an expected call of GetCurrentIndex.
func (mr *MockRepoHostpoolMockRecorder) GetCurrentIndex(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentIndex", reflect.TypeOf((*MockRepoHostpool)(nil).GetCurrentIndex), ctx)
}

// GetHostListFromPool mocks base method.
func (m *MockRepoHostpool) GetHostListFromPool(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostListFromPool", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostListFromPool indicates an expected call of GetHostListFromPool.
func (mr *MockRepoHostpoolMockRecorder) GetHostListFromPool(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostListFromPool", reflect.TypeOf((*MockRepoHostpool)(nil).GetHostListFromPool), ctx)
}

// GetHostListLength mocks base method.
func (m *MockRepoHostpool) GetHostListLength(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostListLength", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostListLength indicates an expected call of GetHostListLength.
func (mr *MockRepoHostpoolMockRecorder) GetHostListLength(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostListLength", reflect.TypeOf((*MockRepoHostpool)(nil).GetHostListLength), ctx)
}

// IncrementIndex mocks base method.
func (m *MockRepoHostpool) IncrementIndex(ctx context.Context, increment int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementIndex", ctx, increment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementIndex indicates an expected call of IncrementIndex.
func (mr *MockRepoHostpoolMockRecorder) IncrementIndex(ctx, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementIndex", reflect.TypeOf((*MockRepoHostpool)(nil).IncrementIndex), ctx, increment)
}

// RemoveHostByHostAddress mocks base method.
func (m *MockRepoHostpool) RemoveHostByHostAddress(ctx context.Context, host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHostByHostAddress", ctx, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHostByHostAddress indicates an expected call of RemoveHostByHostAddress.
func (mr *MockRepoHostpoolMockRecorder) RemoveHostByHostAddress(ctx, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHostByHostAddress", reflect.TypeOf((*MockRepoHostpool)(nil).RemoveHostByHostAddress), ctx, host)
}

// RequeueFirstHostToLast mocks base method.
func (m *MockRepoHostpool) RequeueFirstHostToLast(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequeueFirstHostToLast", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequeueFirstHostToLast indicates an expected call of RequeueFirstHostToLast.
func (mr *MockRepoHostpoolMockRecorder) RequeueFirstHostToLast(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequeueFirstHostToLast", reflect.TypeOf((*MockRepoHostpool)(nil).RequeueFirstHostToLast), ctx)
}

// SetIndex mocks base method.
func (m *MockRepoHostpool) SetIndex(ctx context.Context, newIndex int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIndex", ctx, newIndex)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIndex indicates an expected call of SetIndex.
func (mr *MockRepoHostpoolMockRecorder) SetIndex(ctx, newIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndex", reflect.TypeOf((*MockRepoHostpool)(nil).SetIndex), ctx, newIndex)
}
